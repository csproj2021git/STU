{"ast":null,"code":"function isAbsolute(pathname) {\n  return pathname.charAt(0) === '/';\n} // About 1.5x faster than the two-arg version of Array#splice()\n\n\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\n    list[i] = list[k];\n  }\n\n  list.pop();\n} // This implementation is based heavily on node's url.parse\n\n\nfunction resolvePathname(to, from) {\n  if (from === undefined) from = '';\n  var toParts = to && to.split('/') || [];\n  var fromParts = from && from.split('/') || [];\n  var isToAbs = to && isAbsolute(to);\n  var isFromAbs = from && isAbsolute(from);\n  var mustEndAbs = isToAbs || isFromAbs;\n\n  if (to && isAbsolute(to)) {\n    // to is absolute\n    fromParts = toParts;\n  } else if (toParts.length) {\n    // to is relative, drop the filename\n    fromParts.pop();\n    fromParts = fromParts.concat(toParts);\n  }\n\n  if (!fromParts.length) return '/';\n  var hasTrailingSlash;\n\n  if (fromParts.length) {\n    var last = fromParts[fromParts.length - 1];\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\n  } else {\n    hasTrailingSlash = false;\n  }\n\n  var up = 0;\n\n  for (var i = fromParts.length; i >= 0; i--) {\n    var part = fromParts[i];\n\n    if (part === '.') {\n      spliceOne(fromParts, i);\n    } else if (part === '..') {\n      spliceOne(fromParts, i);\n      up++;\n    } else if (up) {\n      spliceOne(fromParts, i);\n      up--;\n    }\n  }\n\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\n  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');\n  var result = fromParts.join('/');\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\n  return result;\n}\n\nexport default resolvePathname;","map":{"version":3,"names":["isAbsolute","pathname","charAt","spliceOne","list","index","i","k","n","length","pop","resolvePathname","to","from","undefined","toParts","split","fromParts","isToAbs","isFromAbs","mustEndAbs","concat","hasTrailingSlash","last","up","part","unshift","result","join","substr"],"sources":["C:/Users/abronshtein/Desktop/Code/STU/Moodle/client_/node_modules/resolve-pathname/esm/resolve-pathname.js"],"sourcesContent":["function isAbsolute(pathname) {\r\n  return pathname.charAt(0) === '/';\r\n}\r\n\r\n// About 1.5x faster than the two-arg version of Array#splice()\r\nfunction spliceOne(list, index) {\r\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {\r\n    list[i] = list[k];\r\n  }\r\n\r\n  list.pop();\r\n}\r\n\r\n// This implementation is based heavily on node's url.parse\r\nfunction resolvePathname(to, from) {\r\n  if (from === undefined) from = '';\r\n\r\n  var toParts = (to && to.split('/')) || [];\r\n  var fromParts = (from && from.split('/')) || [];\r\n\r\n  var isToAbs = to && isAbsolute(to);\r\n  var isFromAbs = from && isAbsolute(from);\r\n  var mustEndAbs = isToAbs || isFromAbs;\r\n\r\n  if (to && isAbsolute(to)) {\r\n    // to is absolute\r\n    fromParts = toParts;\r\n  } else if (toParts.length) {\r\n    // to is relative, drop the filename\r\n    fromParts.pop();\r\n    fromParts = fromParts.concat(toParts);\r\n  }\r\n\r\n  if (!fromParts.length) return '/';\r\n\r\n  var hasTrailingSlash;\r\n  if (fromParts.length) {\r\n    var last = fromParts[fromParts.length - 1];\r\n    hasTrailingSlash = last === '.' || last === '..' || last === '';\r\n  } else {\r\n    hasTrailingSlash = false;\r\n  }\r\n\r\n  var up = 0;\r\n  for (var i = fromParts.length; i >= 0; i--) {\r\n    var part = fromParts[i];\r\n\r\n    if (part === '.') {\r\n      spliceOne(fromParts, i);\r\n    } else if (part === '..') {\r\n      spliceOne(fromParts, i);\r\n      up++;\r\n    } else if (up) {\r\n      spliceOne(fromParts, i);\r\n      up--;\r\n    }\r\n  }\r\n\r\n  if (!mustEndAbs) for (; up--; up) fromParts.unshift('..');\r\n\r\n  if (\r\n    mustEndAbs &&\r\n    fromParts[0] !== '' &&\r\n    (!fromParts[0] || !isAbsolute(fromParts[0]))\r\n  )\r\n    fromParts.unshift('');\r\n\r\n  var result = fromParts.join('/');\r\n\r\n  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';\r\n\r\n  return result;\r\n}\r\n\r\nexport default resolvePathname;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}