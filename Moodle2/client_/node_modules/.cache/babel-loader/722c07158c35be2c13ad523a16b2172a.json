{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\abronshtein\\\\Desktop\\\\Code\\\\STU\\\\StuVoteApp\\\\client\\\\src\\\\containers\\\\App.jsx\";\nimport React from \"react\";\nimport { Provider } from 'react-redux';\nimport { store } from '../store';\nimport { setCurrentUser, addError, setToken } from '../store/actions';\nimport decode from 'jwt-decode';\nimport Auth from '../components/Auth';\nimport ErrorMessage from \"../components/ErrorMessage\";\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport RouteViews from './RoutesViews'; //When turning on app, it will check if user already logged in\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nif (localStorage.jwtToken) {\n  setToken(localStorage.jwtToken);\n\n  try {\n    store.dispatch(setCurrentUser(decode(localStorage.jwtToken)));\n  } catch (err) {\n    store.dispatch(setCurrentUser({}));\n    store.dispatch(addError(err));\n  }\n}\n\nconst App = () => /*#__PURE__*/_jsxDEV(Provider, {\n  store: store,\n  children: /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Auth, {\n        authType: 'login'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 22,\n  columnNumber: 1\n}, this);\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Provider","store","setCurrentUser","addError","setToken","decode","Auth","ErrorMessage","BrowserRouter","Router","RouteViews","localStorage","jwtToken","dispatch","err","App"],"sources":["C:/Users/abronshtein/Desktop/Code/STU/StuVoteApp/client/src/containers/App.jsx"],"sourcesContent":["import React from \"react\"\r\nimport {Provider} from 'react-redux'\r\nimport {store} from '../store'\r\nimport {setCurrentUser, addError, setToken} from '../store/actions'\r\nimport decode from 'jwt-decode'\r\nimport Auth from '../components/Auth'\r\nimport ErrorMessage from \"../components/ErrorMessage\"\r\nimport {BrowserRouter as Router} from 'react-router-dom'\r\nimport RouteViews from './RoutesViews'\r\n//When turning on app, it will check if user already logged in\r\nif(localStorage.jwtToken){\r\n    setToken(localStorage.jwtToken)\r\n    try{\r\n        store.dispatch(setCurrentUser(decode(localStorage.jwtToken)))\r\n    }catch(err){\r\n        store.dispatch(setCurrentUser({}))\r\n        store.dispatch(addError(err))\r\n    }\r\n}\r\n\r\nconst App = () => \r\n<Provider store = {store}>\r\n    <Router>\r\n        <div>\r\n            <Auth authType = {'login'}/>\r\n            <ErrorMessage/>\r\n        </div>\r\n    </Router>\r\n</Provider>\r\n\r\nexport default App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,cAAR,EAAwBC,QAAxB,EAAkCC,QAAlC,QAAiD,kBAAjD;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAAQC,aAAa,IAAIC,MAAzB,QAAsC,kBAAtC;AACA,OAAOC,UAAP,MAAuB,eAAvB,C,CACA;;;;AACA,IAAGC,YAAY,CAACC,QAAhB,EAAyB;EACrBR,QAAQ,CAACO,YAAY,CAACC,QAAd,CAAR;;EACA,IAAG;IACCX,KAAK,CAACY,QAAN,CAAeX,cAAc,CAACG,MAAM,CAACM,YAAY,CAACC,QAAd,CAAP,CAA7B;EACH,CAFD,CAEC,OAAME,GAAN,EAAU;IACPb,KAAK,CAACY,QAAN,CAAeX,cAAc,CAAC,EAAD,CAA7B;IACAD,KAAK,CAACY,QAAN,CAAeV,QAAQ,CAACW,GAAD,CAAvB;EACH;AACJ;;AAED,MAAMC,GAAG,GAAG,mBACZ,QAAC,QAAD;EAAU,KAAK,EAAId,KAAnB;EAAA,uBACI,QAAC,MAAD;IAAA,uBACI;MAAA,wBACI,QAAC,IAAD;QAAM,QAAQ,EAAI;MAAlB;QAAA;QAAA;QAAA;MAAA,QADJ,eAEI,QAAC,YAAD;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA;EADJ;IAAA;IAAA;IAAA;EAAA;AADJ;EAAA;EAAA;EAAA;AAAA,QADA;;KAAMc,G;AAUN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}